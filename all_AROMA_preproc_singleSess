#! /bin/bash -f
# Written by Aaron Kucyi
# For BIDS-organized data with a  single session for each subject (i.e., no subfolder for sessions within BIDS folder)

# Required inputs:
# 1. Path to dataset folder (parent folder containing subject>run subfolders)
# 2. Name of folder containing organized data (in bids or bids-like format)
# 3. Subject name
# 4. Run name

# All scripts should be in a folder called "scripts" within the parent folder containing subject folders
# ICA-AROMA-master folder should be within "scripts" folder
# Dependencies: FSL, freesurfer, python2.7, ICA-AROMA-master folder

start=$(date +%s)

## Initate inputs, paths and output paths
path=$1
data_folder=$2
sub=$3
run=$4
mkdir -p ${path}/derivatives
mkdir -p ${path}/derivatives/${sub}
mkdir -p ${path}/derivatives/${sub}
mkdir -p ${path}/derivatives/${sub}/anat
mkdir -p ${path}/derivatives/${sub}/func
func_path=${path}/${data_folder}/${sub}/func
output_path=${path}/derivatives/${sub}
echo "path to subject/session is $1/$2/$3"
echo "output path is set to $output_path"
echo "entering subject path ${path}/${data_folder}/${sub}"
cd ${path}/${data_folder}/${sub}

## Segment T1 into WM, CSF, GM (if not already done)
if [ ! -f ${output_path}/anat/anat_brain.nii.gz ]; then
	echo "performing brain extraction for ${sub}"
	cd anat
	anat_file=$(find *.nii.gz)
	bet ${anat_file} ${output_path}/anat/anat_brain -B -f 0.25 -g 0
	echo "performing FAST segmentation for ${sub}"
	fast -t 1 -g -o ${output_path}/anat/anat_brain.nii.gz
	cd ..
	echo "done FAST segmentation"
else
	echo "skipping segmentation (already done)"
fi

## Set up Pre-AROMA FEAT preprocessing template
cd ${func_path}
run_file=$(find $run*)
# remove prior .fsf files and Prestats folders
cd ${output_path}/func
rm -f *.fsf
rm -r -f Prestats_${run}.feat
echo "Creating FSF file for AROMA subject: " $sub
cd ${path}/scripts/fMRI_preprocessing
sed -e "s/####SUBJECT####/${sub}/g" Prestats_AROMA_singleSess.fsf > ${output_path}/temp2.fsf
sed -e "s/####RUN####/${run}/g" ${output_path}/temp2.fsf > ${output_path}/temp3.fsf
tr=`fslinfo ${func_path}/${run} | grep "^pixdim4" | awk '{print $2}'`
echo "TR = ${tr}"
volumes=`fslinfo ${func_path}/${run} | grep "^dim4" | awk '{print $2}'`
echo "n volumes = ${volumes}"
sed -e "s/####TR####/${tr}/g" ${output_path}/temp3.fsf > ${output_path}/temp4.fsf
sed -e "s/####VOLUMES####/${volumes}/g" ${output_path}/temp4.fsf > ${output_path}/temp5.fsf
sed -e "s+####PATH####+${path}+g" ${output_path}/temp5.fsf > ${output_path}/temp6.fsf
sed -e "s+####FUNCDIR####+${func_path}+g" ${output_path}/temp6.fsf > ${output_path}/temp7.fsf
sed -e "s/####VOLUMES####/${volumes}/g" ${output_path}/temp7.fsf > ${output_path}/${sub}_Prestats_AROMA_${run}.fsf
mv ${output_path}/${sub}_Prestats_AROMA_${run}.fsf ${output_path}/func
cd ${output_path}
rm -f temp2.fsf temp3.fsf temp4.fsf temp5.fsf temp6.fsf temp7.fsf
echo "done making FEAT setup for ${sub} ${run}"

## Run FEAT for pre-AROMA
echo "running Pre-AROMA FEAT preprocessing"
cd ${output_path}/func
feat ${sub}_Prestats_AROMA_${run}.fsf
echo "done FEAT for AROMA pipeline, ${sub} ${run}: check registration and motion"

# Run ICA
cd ${path}/scripts/fMRI_preprocessing
python2.7 ICA-AROMA-master/ICA_AROMA.py -feat ${output_path}/func/Prestats_AROMA_${run}.feat -out ${output_path}/func/Prestats_AROMA_${run}.feat/ICA_AROMA
echo "done ICA for ${sub} ${run}"

## Threshold WM and CSF volumes (set WM and CSF volumes to 198000 and 20000)
cd ${output_path}/anat
# register WM and CSF to func
flirt -in anat_brain_pve_0.nii.gz -ref ${output_path}/func/Prestats_AROMA_${run}.feat/example_func.nii.gz -applyxfm -init ${output_path}/func/Prestats_AROMA_${run}.feat/reg/highres2example_func.mat -out ${output_path}/func/CSF_func_${run}
flirt -in anat_brain_pve_2.nii.gz -ref ${output_path}/func/Prestats_AROMA_${run}.feat/example_func.nii.gz -applyxfm -init ${output_path}/func/Prestats_AROMA_${run}.feat/reg/highres2example_func.mat -out ${output_path}/func/WM_func_${run}
final_wm_vol=198000
final_csf_vol=20000
cd ${output_path}/func
# get volume of unthresholded WM and CSF
wm_vol=`fslstats WM_func_${run} -V` 
csf_vol=`fslstats CSF_func_${run} -V`
wm_vol=$(echo $wm_vol | awk '{print $2}')
csf_vol=$(echo $csf_vol | awk '{print $2}')
# get % of voxels in WM and CSF volumes to retain and set intensity threshold
wm_retain=`python -c "print ($final_wm_vol / float($wm_vol) )"`
csf_retain=`python -c "print ($final_csf_vol / float($csf_vol)  )"`
wm_cutoff=`python -c "print (100-($wm_retain*100) )"`
csf_cutoff=`python -c "print (100-($csf_retain*100) )"`
wm_thr=`fslstats WM_func_${run} -P $wm_cutoff`
csf_thr=`fslstats CSF_func_${run} -P $csf_cutoff`
# compute and output thresholded WM and CSF volumes
fslmaths WM_func_${run} -thr $wm_thr -bin WM_thr_${run}
fslmaths CSF_func_${run} -thr $csf_thr -bin CSF_thr_${run}

# regress out WM & CSF (AROMA pipeline)
cd ${output_path}/func

fslmeants -i Prestats_AROMA_${run}.feat/ICA_AROMA/denoised_func_data_nonaggr -o WM_AROMA_${run}.txt -m WM_thr_${run}
echo "done extracting WM"

fslmeants -i Prestats_AROMA_${run}.feat/ICA_AROMA/denoised_func_data_nonaggr -o CSF_AROMA_${run}.txt -m CSF_thr_${run}
echo "done extracting CSF"

fsl_regfilt -i  Prestats_AROMA_${run}.feat/ICA_AROMA/denoised_func_data_nonaggr -d  WM_AROMA_${run}.txt -o WM_${run}_AROMA -f "1"
echo "done regressing out WM"

fsl_regfilt -i  WM_${run}_AROMA -d  CSF_AROMA_${run}.txt -o AROMA_${run} -f "1"
echo "done regressing out CSF"
rm -f WM_${run}_AROMA.nii.gz
echo "done regressing out WM+CSF for ${sub} ${run}"

## Run bandpass filtering (0.01 - 0.1 Hz)
#hp_sigma=`python -c "print (((1/.01)/2)/$tr)"`
#lp_sigma=`python -c "print (((1/.1)/2)/$tr)"`
fslmaths AROMA_${run} -Tmean tempMean
3dBandpass -notrans -nodetrend -prefix ${run}_AROMA_bptf.nii.gz 0.01 0.1 AROMA_${run}.nii.gz
fslmaths ${run}_AROMA_bptf.nii.gz -add tempMean ${run}_AROMA_bptf.nii.gz
#fslmaths AROMA_${run} -bptf $hp_sigma $lp_sigma -add tempMean ${run}_AROMA_bptf
rm -f tempMean.nii.gz AROMA_${run}.nii.gz
echo "done 0.01-0.1 Hz filtering"
end=$(date +%s)
end_mins=`python -c "print (($end-$start)/60 )"`
echo "done ICA-AROMA preprocessing for ${sub} ${run}! Total time: $end_mins minutes"


