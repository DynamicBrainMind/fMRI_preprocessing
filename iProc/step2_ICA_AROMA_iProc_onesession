#! /bin/bash -f
# Written by Aaron Kucyi
# compatible with BIDS or BIDS-like organized data

# Required inputs:
# 1. Path to bids dataset folder
# 2. Subject name
# 3. Session: Name of func session to process (all runs in this session)
# 4. Anat session: Name of session to use for anatomical scan (for registration of all func runs/session)

usage() {
	echo ""
	echo "Usage: step2_ICA_AROMA_iProc_onesession <path_to_bids_folder> <subject_name> <name_of_func_session> <name_of_anat_session>"
	echo "example: step2_ICA_AROMA_iProc_onesession /work/kucyi/data/Hung_MW/bids_data MW01 Session1 Session1"
	echo "(4 inputs required)"
	echo "This function performs preprocessing including ICA-AROMA and regression of WM and CSF signals for all BOLD runs within one session"
	echo "The anat session must be specified for the T1 scan to use for registration"
	echo "output will be in <path_to_bids_folder>/derivatives/subject/iProc"
}

if [[ $# -eq 0 ]] ; then
	usage
	exit
fi

## Initate inputs, paths and output paths
bids_path=$1
sub=$2
session=$3
anat_session=$4
path=`echo ${bids_path%/*}`
data_folder=`basename ${bids_path}`
func_path=${path}/derivatives/${sub}/iProc/${session}/func

## Segment T1 into WM, CSF, GM (if not already done)
anat_path=${path}/derivatives/${sub}/${anat_session}/anat
mkdir -p ${path}/derivatives/${sub}/${anat_session}
mkdir -p ${anat_path}
if [ ! -f ${anat_path}/anat_brain.nii.gz ]; then
	echo "performing brain extraction for ${sub} ${session}"
	anat_file=`find ${bids_path}/${sub}/${anat_session}/anat -name "*.nii*"`
	bet ${anat_file} ${anat_path}/anat_brain -B -f 0.25 -g 0
	echo "performing FAST segmentation for ${sub} ${session}"
	fast -t 1 -g -o ${anat_path}/anat_brain.nii.gz
	echo "done FAST segmentation"
else
	echo "skipping segmentation (already done)"
fi

## Set up Pre-AROMA FEAT preprocessing template
runs=`find ${func_path} -name *mcf_template.nii*`
echo "runs for ${session} are ${runs}"
for run in $runs
do
run_file=${run}
run=`basename ${run_file}`
run=${run%_mcf_template.*}
#run="${run%.*}"
#run="${run%.*}"
#run=${run::${#run}-13}
echo "current run being processed: ${run}"
output_path=${path}/derivatives/${sub}/iProc/${session}
echo "Creating FSF file for AROMA for $sub $session $run"
Prestats_AROMA=`which Prestats_AROMA_iProc.fsf`
scripts_dir=${Prestats_AROMA%/*}
sed -e "s/####SUBJECT####/${sub}/g" ${Prestats_AROMA} > ${output_path}/temp.fsf
sed -e "s/####SESSION####/${session}/g" ${output_path}/temp.fsf > ${output_path}/temp2.fsf
sed -e "s/####RUN####/${run}/g" ${output_path}/temp2.fsf > ${output_path}/temp3.fsf
tr=`fslinfo ${run_file} | grep "^pixdim4" | awk '{print $2}'`
echo "TR = ${tr}"
volumes=`fslinfo ${run_file} | grep "^dim4" | awk '{print $2}'`
echo "n volumes = ${volumes}"
sed -e "s/####TR####/${tr}/g" ${output_path}/temp3.fsf > ${output_path}/temp4.fsf
sed -e "s/####VOLUMES####/${volumes}/g" ${output_path}/temp4.fsf > ${output_path}/temp5.fsf
sed -e "s+####PATH####+${path}+g" ${output_path}/temp5.fsf > ${output_path}/temp6.fsf
sed -e "s+####FUNCDIR####+${func_path}+g" ${output_path}/temp6.fsf > ${output_path}/temp7.fsf
sed -e "s+####ANATSESSION####+${anat_session}+g" ${output_path}/temp7.fsf > ${output_path}/temp8.fsf
sed -e "s+####STANDARD####+${scripts_dir}+g" ${output_path}/temp8.fsf > ${output_path}/temp9.fsf
sed -e "s/####VOLUMES####/${volumes}/g" ${output_path}/temp9.fsf > ${output_path}/${sub}_Prestats_AROMA_${run}.fsf
mv ${output_path}/${sub}_Prestats_AROMA_${run}.fsf ${func_path}
rm -f ${output_path}/temp.fsf ${output_path}/temp2.fsf ${output_path}/temp3.fsf ${output_path}/temp4.fsf ${output_path}/temp5.fsf ${output_path}/temp6.fsf ${output_path}/temp7.fsf ${output_path}/temp8.fsf ${output_path}/temp9.fsf
echo "done making FEAT setup for ${sub} ${session} ${run}"

## Run FEAT for pre-AROMA
echo "running Pre-AROMA FEAT preprocessing"
feat ${func_path}/${sub}_Prestats_AROMA_${run}.fsf
echo "done FEAT for AROMA pipeline, ${sub} ${run}: check registration"

## copy motion parameters into FEAT folder
mkdir -p ${func_path}/Prestats_AROMA_${run}.feat/mc
cp -r ${func_path}/${run}_mcf.mat ${func_path}/Prestats_AROMA_${run}.feat/mc/prefiltered_func_data_mcf.mat
cp ${func_path}/${run}_mcf.par ${func_path}/Prestats_AROMA_${run}.feat/mc/prefiltered_func_data_mcf.par

## Run ICA
python2.7 ${scripts_dir}/ICA-AROMA-master/ICA_AROMA.py -feat ${func_path}/Prestats_AROMA_${run}.feat -out ${func_path}/Prestats_AROMA_${run}.feat/ICA_AROMA
echo "done ICA for ${sub} ${run}"

## Threshold WM and CSF volumes (set WM and CSF volumes to 198000 and 20000)
flirt -in ${anat_path}/anat_brain_pve_0.nii.gz -ref ${func_path}/Prestats_AROMA_${run}.feat/example_func.nii.gz -applyxfm -init ${func_path}/Prestats_AROMA_${run}.feat/reg/highres2example_func.mat -out ${func_path}/CSF_func_${run}
flirt -in ${anat_path}/anat_brain_pve_2.nii.gz -ref ${func_path}/Prestats_AROMA_${run}.feat/example_func.nii.gz -applyxfm -init ${func_path}/Prestats_AROMA_${run}.feat/reg/highres2example_func.mat -out ${func_path}/WM_func_${run}
final_wm_vol=198000
final_csf_vol=20000
# get volume of unthresholded WM and CSF
wm_vol=`fslstats ${func_path}/WM_func_${run} -V` 
csf_vol=`fslstats ${func_path}/CSF_func_${run} -V`
wm_vol=$(echo $wm_vol | awk '{print $2}')
csf_vol=$(echo $csf_vol | awk '{print $2}')
# get % of voxels in WM and CSF volumes to retain and set intensity threshold
wm_retain=`python -c "print ($final_wm_vol / float($wm_vol) )"`
csf_retain=`python -c "print ($final_csf_vol / float($csf_vol)  )"`
wm_cutoff=`python -c "print (100-($wm_retain*100) )"`
csf_cutoff=`python -c "print (100-($csf_retain*100) )"`
wm_thr=`fslstats ${func_path}/WM_func_${run} -P $wm_cutoff`
csf_thr=`fslstats ${func_path}/CSF_func_${run} -P $csf_cutoff`
# compute and output thresholded WM and CSF volumes
fslmaths ${func_path}/WM_func_${run} -thr $wm_thr -bin ${func_path}/WM_thr_${run}
fslmaths ${func_path}/CSF_func_${run} -thr $csf_thr -bin ${func_path}/CSF_thr_${run}

## regress out thresholded WM & CSF (post-AROMA)
fslmeants -i ${func_path}/Prestats_AROMA_${run}.feat/ICA_AROMA/denoised_func_data_nonaggr -o ${func_path}/WM_AROMA_${run}.txt -m ${func_path}/WM_thr_${run}
echo "done extracting WM"
fslmeants -i ${func_path}/Prestats_AROMA_${run}.feat/ICA_AROMA/denoised_func_data_nonaggr -o ${func_path}/CSF_AROMA_${run}.txt -m ${func_path}/CSF_thr_${run}
echo "done extracting CSF"
fsl_regfilt -i  ${func_path}/Prestats_AROMA_${run}.feat/ICA_AROMA/denoised_func_data_nonaggr -d  ${func_path}/WM_AROMA_${run}.txt -o ${func_path}/WM_${run}_AROMA -f "1"
echo "done regressing out WM"
fsl_regfilt -i  ${func_path}/WM_${run}_AROMA -d  ${func_path}/CSF_AROMA_${run}.txt -o ${func_path}/AROMA_${run} -f "1"
echo "done regressing out CSF"
rm -f ${func_path}/WM_${run}_AROMA.nii.gz ${func_path}/CSF_${run}_AROMA.nii.gz
echo "done ICA-AROMA preprocessing (iProc pipeline) for ${sub} ${session} ${run} !"
done

## remove intermediate files
rm -f ${func_path}/WM_func_${run}.nii.gz ${func_path}/CSF_func_${run}.nii.gz ${func_path}/WM_AROMA_${run}.txt ${func_path}/CSF_AROMA_${run}.txt





